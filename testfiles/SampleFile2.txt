# An example file to show off how the game works.
# The author makes no claim of right to this file.

 {
   "Initial State" : "GREEN",
   "Global Functions" :
 "
   function GOTO (arg) is
      set command to {}
      set x to GetX(arg)
      if x < 0 then
         while x < 0 do
            set command to PushBack(command, 'Left')
            set x to x + 1
         end
      elseif x > 0 then
         while x > 0 do
            set command to PushBack(command, 'Right')
            set x to x - 1
         end
      end
      set y to GetY(arg)
      if y < 0 then
         while y < 0 do
            set command to PushBack(command, 'Down')
            set y to y + 1
         end
      elseif y > 0 then
         while y > 0 do
            set command to PushBack(command, 'Up')
            set y to y - 1
         end
      end
      call Enqueue(command)
      return arg
   end

   function FETCH (arg) is
      call GOTO (arg)
      call Enqueue('Grab')
      call GOTO (-arg)
      call Enqueue('Drop')
      return arg
   end

   function TRANSFORM (arg) is
      call GOTO (arg)
      call Enqueue('Make White')
      call GOTO (-arg)
      return arg
   end
 ",
   "States" :
    {
      "BLUE" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      set blues to FindAll('BLUE')
      if 0 <> Size(blues) then
         for vec in blues do
            call FETCH(vec)
         end
      end
      call Enqueue('POST BLUE')
      call Leave()
      return ''
   end
 "
       },
      "PRE BLUE" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      if 0 = FreeAgents() then
         call Report()
      else
         call Enqueue('Grab')
         call Enqueue('Make White')
         call Enqueue('Drop')
         call Enqueue('Task')
         call Enqueue('BLUE')
         call Leave()
      end
      return ''
   end
 "
       },
      "POST BLUE" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      set nears to FindNearest('GREEN')
      if 0 <> Size(nears) then
         call GOTO(nears[0])
         call Enqueue('PRE BLUE')
      end
      call Leave()
      return ''
   end
 "
       },
      "BLUE DRONE" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      if 'WHITE' <> Look(arg) then
         call TRANSFORM(arg)
      end
      call Enqueue('Report')
      call Leave()
      return ''
   end
 "
       },
      "GREEN" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      call Task('PRE BLUE', arg)
      call Report()
      return arg
   end
 "
       },
      "GREEN DRONE" :
       {
         "Data" : "tasks",
         "Functions" :
 "
   function Update (arg) is
      if IsDouble(tasks) then
         set tasks to FindAll('GRAY')
         set temp to FindAll('BLACK')
         while 0 < Size(temp) do
            set tasks to PushBack(tasks, temp[0])
            set temp to PopFront(temp)
         end
         if 0 = Size(tasks) then
            call Report()
         end
      end
      while 0 <> FreeAgents() & 0 <> Size(tasks) do
         call Task('BLUE DRONE', tasks[0])
         set tasks to PopFront(tasks)
      end
      if 0 = Size(tasks) then
         set tasks to 0
      end
      return arg
   end
 "
       },
      "Left" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      if '' = arg then
         call Left()
         return 'Left'
      else
         call Leave()
         return ''
      end
   end
 "
       },
      "Right" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      if '' = arg then
         call Right()
         return 'Right'
      else
         call Leave()
         return ''
      end
   end
 "
       },
      "Up" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      if '' = arg then
         call Up()
         return 'Up'
      else
         call Leave()
         return ''
      end
   end
 "
       },
      "Down" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      if '' = arg then
         call Down()
         return 'Down'
      else
         call Leave()
         return ''
      end
   end
 "
       },
      "Grab" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      if '' = arg then
         set seen to Look(MakeVec(0, 0, 0))
         if !(('WHITE' = seen) | ('BLACK' = seen) | ('GRAY' = seen)) then
            call Grab()
            return 'Grab'
         end
      end
      call Leave()
      return ''
   end
 "
       },
      "Drop" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      if '' = arg then
         call Drop()
         return 'Drop'
      else
         call Leave()
         return ''
      end
   end
 "
       },
      "Do Nothing" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      return arg
   end
 "
       },
      "Report" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      call Report()
      return arg
   end
 "
       },
      "Task" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      call Task('GREEN DRONE', arg)
      call Leave()
      return arg
   end
 "
       },
      "Make White" :
       {
         "Data" : "",
         "Functions" :
 "
   function Update (arg) is
      set seen to Look(MakeVec(0, 0, 0))
      if 'BLUE' = seen then
         if 0 = Size(GetInfo()) then
            call Inform(1.0)
            return arg
         else
            call Leave()
         end
      elseif ('BLACK' = seen) | ('GRAY' = seen) then
         call Transform()
      else
         call Leave()
      end
      return arg
   end
 "
       }
    }
 }
